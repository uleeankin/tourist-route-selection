server:
  port: 8081

spring:
  session:
    jdbc:
      initialize-schema: always

primary:
  datasource:
    url: jdbc:postgresql://localhost:5433/tourist_route_selection
    username: postgres
    password: admin

city:
  all: select city_id, city_name from city where city_name <> 'none';
  one: select city_id, city_name from city where city_name = ?;
  save: insert into city (city_name) values (?);

category:
  all: select category_id, category_name from category;
  one: select category_id, category_name from category where category_name = ?;
  save: insert into category (category_name) values (?);

user:
  userAdding: insert into user_info (login, user_password, user_role, city) values (?, ?, ?, ?);
  statusChanging: update user_info set user_status = ? where login = ?;
  userByLogin: select login, user_password, user_info.user_role, role_name, user_info.city, city_name, user_status from (user_info join city on user_info.city = city.city_id) join user_role on user_info.user_role = user_role.role_id where login = ?;
  touristAdding: insert into tourist (login, tourist_name, tourist_surname, tourist_lastname) values (?, ?, ?, ?);
  moderators: select user_info.login, user_password, user_info.user_role, role_name, user_info.city, city_name, user_status from (user_info join city on user_info.city = city.city_id) join user_role on user_info.user_role = user_role.role_id where role_name = ?;
  touristByLogin: select user_info.login, user_password, user_info.user_role, role_name, user_info.city, city_name, user_status, tourist_name, tourist_surname, tourist_lastname from ((user_info join city on user_info.city = city.city_id) join user_role on user_info.user_role = user_role.role_id) join tourist on user_info.login = tourist.login where user_info.login = ?;
  orgAdding: insert into organization (login, organization_name) values (?, ?);
  orgs: select user_info.login, user_password, user_info.user_role, role_name, user_info.city, city_name, user_status, organization_name from ((user_info join city on user_info.city = city.city_id) join user_role on user_info.user_role = user_role.role_id) join organization on user_info.login = organization.login where user_role.role_name = ?;

role:
  name: select role_id, role_name from user_role where role_name = ?;

activity:
  activityAdding: insert into activity (activity_name, description, coordinates, category, photo, price, duration) values (?, ?, ?, ?, ?, ?, ?);
  all: select activity_id, activity_name, description, coordinates_id, latitude, longitude, city_id, city_name, category_id, category_name, photo, price, duration from ((activity join coordinate on activity.coordinates = coordinate.coordinates_id) join category on activity.category = category.category_id) join city on coordinate.city = city.city_id where activity_id not in (select event_id from actual_event);
  byCity: select activity_id, activity_name, description, coordinates_id, latitude, longitude, city_id, city_name, category_id, category_name, photo, price, duration from ((activity join coordinate on activity.coordinates = coordinate.coordinates_id) join category on activity.category = category.category_id) join city on coordinate.city = city.city_id where city_name = ? and activity_id not in (select event_id from actual_event);
  byId: select activity_id, activity_name, description, coordinates_id, latitude, longitude, city_id, city_name, category_id, category_name, photo, price, duration from ((activity join coordinate on activity.coordinates = coordinate.coordinates_id) join category on activity.category = category.category_id) join city on coordinate.city = city.city_id where activity_id = ?;
  byCityAndCategory: select activity_id, activity_name, description, coordinates_id, latitude, longitude, city_id, city_name, category_id, category_name, photo, price, duration from ((activity join coordinate on activity.coordinates = coordinate.coordinates_id) join category on activity.category = category.category_id) join city on coordinate.city = city.city_id where city_name = ? and category_name = ? and activity_id not in (select event_id from actual_event);
  toFavourite: insert into favourite_activity (user_id, activity_id) values (?, ?);
  deleteFromFavouriteQuery: delete from favourite_activity where user_id = ? and activity_id = ?;
  allFavourites: select activity_id, activity_name, description, coordinates_id, latitude, longitude, city_id, city_name, category_id, category_name, photo, price, duration from ((activity join coordinate on activity.coordinates = coordinate.coordinates_id) join category on activity.category = category.category_id) join city on coordinate.city = city.city_id where activity_id in (select activity_id from favourite_activity where user_id = ?) and activity_id not in (select event_id from actual_event);
  favouritesByCityAndCategory: select activity_id, activity_name, description, coordinates_id, latitude, longitude, city_id, city_name, category_id, category_name, photo, price, duration from ((activity join coordinate on activity.coordinates = coordinate.coordinates_id) join category on activity.category = category.category_id) join city on coordinate.city = city.city_id where city_name = ? and category_name = ? and activity_id in (select activity_id from favourite_activity where user_id = ?) and activity_id not in (select event_id from actual_event);
  existence: select exists (select * from favourite_activity where user_id = ? and activity_id = ?);
  update: update activity set activity_name = ?, description = ?, duration = ?, price = ? where activity_id = ?;
  deleteById: delete from activity where activity_id = ?;
  byCoordinates: select activity_id, activity_name, description, coordinates_id, latitude, longitude, city_id, city_name, category_id, category_name, photo, price, duration from ((activity join coordinate on activity.coordinates = coordinate.coordinates_id) join category on activity.category = category.category_id) join city on coordinate.city = city.city_id where activity.activity_name = ? and coordinate.latitude = ? and coordinate.longitude = ?;

coordinate:
  adding: insert into coordinate (latitude, longitude, city) values (?, ?, ?);
  object: select coordinates_id, latitude, longitude, city_id, city_name from coordinate join city on coordinate.city = city.city_id where latitude = ? and longitude = ?;
  delete: delete from coordinate where coordinates_id = ?;

preliminary:
  save: insert into preliminary_activity (preliminary_route_id, activity_id, is_event) values (?, ?, ?);
  updateEventStatus: update preliminary_activity set is_event = ? where preliminary_route_id = ? and activity_id = ?;
  deleteAll: delete from preliminary_activity where preliminary_route_id = ?;
  deleteById: delete from preliminary_activity where preliminary_route_id = ? and activity_id = ?;
  updateTime: update preliminary_activity set event_time = ? where preliminary_route_id = ? and activity_id = ?;
  hasEvents: select exists(select * from preliminary_activity where preliminary_route_id = ? and is_event = ?) as event_existing;
  all: select preliminary_route_id, activity.activity_id, activity_name, description, coordinates_id, latitude, longitude, city_id, city_name, category_id, category_name, photo, price, duration, is_event, event_time from (((preliminary_activity join activity on preliminary_activity.activity_id = activity.activity_id) join coordinate on activity.coordinates = coordinate.coordinates_id) join category on activity.category = category.category_id) join city on coordinate.city = city.city_id where preliminary_route_id = ?;
  allPreliminary: select preliminary_route_id, activity.activity_id, activity_name, description, coordinates_id, latitude, longitude, city_id, city_name, category_id, category_name, photo, price, duration, is_event, event_time from (((preliminary_activity join activity on preliminary_activity.activity_id = activity.activity_id) join coordinate on activity.coordinates = coordinate.coordinates_id) join category on activity.category = category.category_id) join city on coordinate.city = city.city_id where preliminary_route_id = ? and is_compulsory = ?;

event:
  update: update actual_event set start_date = ?, end_date = ? where event_id = ?;
  save: insert into actual_event (event_id, start_date, end_date, event_owner) values (?, ?, ?, ?);
  saveSession: insert into event_session (event_id, session_time) values (?, ?);
  all: select activity_id, activity_name, description, coordinates_id, latitude, longitude, city_id, city_name, category_id, category_name, photo, price, duration, start_date, end_date, event_owner from (((activity join coordinate on activity.coordinates = coordinate.coordinates_id) join category on activity.category = category.category_id) join city on coordinate.city = city.city_id) join actual_event on activity.activity_id = actual_event.event_id;
  byDate: select activity_id, activity_name, description, coordinates_id, latitude, longitude, city_id, city_name, category_id, category_name, photo, price, duration, start_date, end_date, event_owner from (((activity join coordinate on activity.coordinates = coordinate.coordinates_id) join category on activity.category = category.category_id) join city on coordinate.city = city.city_id) join actual_event on activity.activity_id = actual_event.event_id where actual_event.start_date <= ? and actual_event.end_date >= ?;
  delete: delete from actual_event where event_id = ?;
  deleteSession: delete from event_session where event_id = ?;
  byId: select activity_id, activity_name, description, coordinates_id, latitude, longitude, city_id, city_name, category_id, category_name, photo, price, duration, start_date, end_date, event_owner from (((activity join coordinate on activity.coordinates = coordinate.coordinates_id) join category on activity.category = category.category_id) join city on coordinate.city = city.city_id) join actual_event on activity.activity_id = actual_event.event_id where activity.activity_id = ?;
  schedule: select event_id, session_time from event_session where event_id = ? order by session_time;
  deleteEventSession: delete from event_session where event_id = ? and session_time = ?;
  addSession: insert into event_session (event_id, session_time) values (?, ?);
  favourites: select activity_id, activity_name, description, coordinates_id, latitude, longitude, city_id, city_name, category_id, category_name, photo, price, duration, start_date, end_date, event_owner from (((activity join coordinate on activity.coordinates = coordinate.coordinates_id) join category on activity.category = category.category_id) join city on coordinate.city = city.city_id) join actual_event on activity.activity_id = actual_event.event_id where activity_id in (select activity_id from favourite_activity where user_id = ?);
  favouritesInRoute: select activity_id, activity_name, description, coordinates_id, latitude, longitude, city_id, city_name, category_id, category_name, photo, price, duration, start_date, end_date, event_owner from (((activity join coordinate on activity.coordinates = coordinate.coordinates_id) join category on activity.category = category.category_id) join city on coordinate.city = city.city_id) join actual_event on activity.activity_id = actual_event.event_id where activity_id in (select activity_id from favourite_activity where user_id = ?) and city_name = ? and category_name = ? and start_date <= ? and end_date >= ?;